name: Run Selenium Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-timeout  # Install timeout plugin to avoid errors

    - name: Install Google Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg unzip xvfb libxi6 libgbm1 libxss1 libnss3 fonts-liberation libappindicator3-dev xdg-utils
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -f install -y

    - name: Install ChromeDriver
      run: |
        CHROME_VERSION=$(google-chrome --version | grep -oE "[0-9]+(\.[0-9]+)+" | head -1)
        echo "Detected Chrome version: $CHROME_VERSION"
        DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_VERSION%%.*}")
        echo "Matching ChromeDriver version: $DRIVER_VERSION"
        wget -q "https://storage.googleapis.com/chrome-for-testing-public/${DRIVER_VERSION}/linux64/chromedriver-linux64.zip"
        unzip chromedriver-linux64.zip
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
        rm -rf chromedriver-linux64*
        chromedriver --version

    - name: Run Selenium tests
      env:
        TEST_DATA_PATH: src/Data/CTKMS_R1_TestData.xlsx
        PYTHONPATH: ${{ github.workspace }}
      run: |
        # Create timestamped folder
        TIMESTAMP=$(date +'%d_%m_%Y_%H_%M_%S')
        REPORT_DIR="src/TestReports/TestReports_$TIMESTAMP"
        mkdir -p $REPORT_DIR

        # Run tests using your existing test logic which generates the full report structure
        python -m pytest -v -s --disable-warnings --maxfail=1 \
          --junitxml=$REPORT_DIR/results.xml

    - name: Upload Selenium test report
      uses: actions/upload-artifact@v4
      with:
        name: selenium-test-report
        path: src/TestReports/TestReports_*
